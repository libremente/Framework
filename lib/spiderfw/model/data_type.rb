module Spider

    # The DataType module, if included by a Class, allows to use it as an element type in a Model.
    # The Class must be a subclass of a base type (see Spider::Model.base_types), and allow to be initialized
    # passing the superclass instance as the only parameter; or, it must define maps_to, and override
    # the from_value method.
    #
    # Extends the including class with ClassMethods.
    
    module DataType
        @maps_to = nil
        
        def self.included(klass)
            klass.extend(ClassMethods)
        end
        
        module ClassMethods
            
            # This method will be called when instantiating the DataType from a base type.
            # The default implementation calls the DataType constructor passing it the value.
            def from_value(value)
                return nil if value.nil?
                return self.new(value)
            end
            
            # Sets and/or returns the base type the DataType is converted to by the Mapper when storing.
            def maps_to(val=nil)
                @maps_to = val if val
                @maps_to
            end
            
            # Sets and/or returns a base type the DataType will be converted to when loaded by the Mapper.
            def maps_back_to(val=nil)
                @maps_back_to = val if val
                @maps_back_to
            end
            
            # Defines a list of Element attributes the DataType will use. They will be available in the @attributes
            # instance variable.
            def take_attributes(*list)
                if (list && !list.empty?)
                    @take_attributes = list
                else
                    @take_attributes || []
                end
            end
            
            # Tells the class that this type generates the element's value automatically
            def autogenerated
                @autogenerated = true
            end
            
            # Returns whether the given element is autogenerated
            def auto?(element)
                @autogenerated && element.attributes[:auto]
            end
            
            # Is called by the BaseModel when creating an element of this type. Can modify the element's attributes.
            def set_element_attributes(attributes)
                attributes[:auto] = true if @autogenerated && attributes[:auto] != false
            end
            
            # Returns whether values need to be wrapped in this DataType when they are set on models instances.
            def force_wrap?
                true
            end
            
            # Indicates that the actual type of this DataType depends on the mapper (e.g. PK)
            def mapper_dependant
                @mapper_dependant = true
            end

            # Returns whether this DataTypes is mapper dependant
            def mapper_dependant?
                @mapper_dependant
            end
            
        end
        
        # Returns the DataType attributes, as set in the Model Element.
        # (See ClassMethods.take_attributes).
        def attributes
            @attributes ||= {}
        end
        
        # Returns a representation of the DataType for storing.
        def map(mapper_type)
            self
        end
        
        # This method may be overridden by subclasses and provide different textual representation for named formats.
        # Possible formats are :normal, :short, :medium, :long, :full.
        # The default implementation ignores the format and just calls to_s.
        def format(format = :normal)
            self.to_s
        end
        
        # Is called after an object has acquired the value and finished setting the attributes; should
        # should alter the value according to the attributes.
        def prepare
            self
        end
        
        # Returns a new instance of the datatype for the value passed, copying any set attributes
        def new(val=nil)
            dt = self.class.new(val)
            attributes.each{ |k, v| dt.attributes[k] = v }
            dt
        end
        
    end
    
end